class Solution 
{
public:
    int amountOfTime(TreeNode* root, int start) 
    {
       unordered_map<int , vector<int>> gr;
       convert(root , 0 , gr);
       queue<int> q;
       q.push(start);
       int minute = 0;
       unordered_set<int> visited;
       visited.insert(start);
       while(!q.empty())
       {
           int sz = q.size();
           while(sz--)
           {
               int node = q.front();
               q.pop();

               for(int child : gr[node])
               {
                   if(visited.find(child) == visited.end())
                   {
                       visited.insert(child);
                       q.push(child);
                   }
               }
           }
           minute++;
       }    
       return minute-1;
    }

    void convert(TreeNode* node , int parent , unordered_map<int , vector<int>>& gr)
    {
        if(node==NULL) return;
        vector<int>& adjacentList = gr[node->val];
        if(parent!=0) adjacentList.push_back(parent);
        if(node->left != NULL) adjacentList.push_back(node->left->val);
        if(node->right!=NULL) adjacentList.push_back(node->right->val);

        convert(node->left , node->val , gr);
        convert(node->right , node->val , gr);
     }
};
