class Solution 
{
public:
    vector < vector < int >> zigzagLevelOrder(TreeNode * root) {
  vector < vector < int >> result;
  if (root == NULL) {
    return result;
  }

  queue < TreeNode * >q;
  q.push(root);
  bool leftToRight = true;

  while (!q.empty()) {
    int size = q.size();
    vector < int > row(size);
    for (int i = 0; i < size; i++) {
      TreeNode * node = q.front();
      q.pop();
      int index;
      // find position to fill node's value
      if(leftToRight==true)
      {
          index=i;     // when we have to traverse from left to right
      }
      else
      {
          index=size-i-1;     //when we have to traverse from right to left
      }

      row[index] = node -> val;
      if (node -> left) {
        q.push(node -> left);
      }
      if (node -> right) {
        q.push(node -> right);
      }
    }
    // after this level
    leftToRight = !leftToRight;   // after 1 level change leftToright from true to false or vice versa
    result.push_back(row);
  }
  return result;
}
};
