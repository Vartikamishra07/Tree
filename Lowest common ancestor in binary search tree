1.Recursive solution

class Solution 
{
public:
TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q)   
{
    if(root==NULL)
    {
        return NULL;
    }  
    int curr=root->val;
    if(curr<p->val && curr<q->val)
    {
        lowestCommonAncestor(root->right , p , q);
    }
    if(curr>p->val && curr>q->val)
    {
        lowestCommonAncestor(root->left , p , q);
    }
    return root;
}
};

2.Iterative solution

class Solution 
{
public:
TreeNode *lowestCommonAncestor(TreeNode *root, TreeNode *p, TreeNode *q)
{
    while (root)
    {
        if (root->val > p->val && root->val > q->val)
            root = root->left;
        else if (root->val < q->val && root->val < p->val)
            root = root->right;
        else
            return root;
    }
    return NULL;
}
};
