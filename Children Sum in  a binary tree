1. Code to check if all nodes in a binary tree follows children-sum property that is whether nodes value is equal to sum of left children and rights children value.

class Solution{
    public:
    //Function to check whether all nodes of a tree have the value equal to the sum of their child nodes.
    int isSumProperty(Node *root)
    {
        int left_data = 0;
        int right_data = 0;
        
        // Base case: If the node is NULL or it's a leaf node
        if(root == NULL || (root->left == NULL && root->right == NULL)) return 1;
        
        // Recursively check the left and right children
        if(root->left != NULL)
        {
            left_data = root->left->data;
        }
        if(root->right != NULL)
        {
            right_data = root->right->data;
        }
        
        // Check if the current node satisfies the sum property and recursively check for left and right children
        if((root->data == left_data + right_data) && 
           isSumProperty(root->left) && 
           isSumProperty(root->right))
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
};



2.if the tree dees not form children -sum property then convert it into a tree that follows children sum property

class Solution
{
    public:
    void isSumProperty(Node *root)
    {
        if(root==NULL) return;
        int sum=0;
        if(root->left) sum+=root->left->data;
        if(root->right) sum+=root->right->data;
        if(sum>=root->data) root->data=sum;
        else
        {
           if(root->left) root->left->data=root->data;
           else if(root->right) root->right->data=root->data;
        }

      isSumProperty(root->left);
      isSumProperty(root->right);

      int ans=0;
      if(root->left)ans+=root->left->data;
      if(root->right) ans+=root->right->data;
      if(root->left || root->right) root->data=ans;
      return ans;
    }
};
