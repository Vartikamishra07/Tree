1. Solution 1

class Solution 
{
public:
    bool isBalanced(TreeNode* root) 
    {
        if(height(root)!=-1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    int height(TreeNode *root)
    {
        if(root==NULL) return 0;
        int lh=height(root->left);
        if(lh==-1) return -1;
        int rh=height(root->right);
        if(rh==-1) return -1;
        if(abs(lh-rh)>1) return -1;
        return 1+max(lh,rh);
    }
};



2. Solution 2

bool isBalanced(Node* root) 
{
        // If the tree is empty, it's balanced
        if (root == nullptr) 
        {
            return true;
        }

        // Calculate the height of left and right subtrees
        int leftHeight = getHeight(root->left);
        int rightHeight = getHeight(root->right);

        // Check if the absolute difference in heights of left and right subtrees is <= 1
        if (abs(leftHeight - rightHeight) <= 1 && isBalanced(root->left) &&  isBalanced(root->right)) 
        {
            return true;
        }

        // If any condition fails, the tree is unbalanced
        return false;
}

// Function to calculate the height of a subtree
int getHeight(Node* root) 
{
        // Base case: if the current node is NULL, return 0 (height of an empty tree)
        if (root == nullptr) 
        {
            return 0;
        }

        // Recursively calculate the height of left and right subtrees
        int leftHeight = getHeight(root->left);
        int rightHeight = getHeight(root->right);

        // Return the maximum height of left and right subtrees plus 1 (to account for the current node)
        return max(leftHeight, rightHeight) + 1;
}
