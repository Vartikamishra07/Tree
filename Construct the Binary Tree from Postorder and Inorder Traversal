
class Solution 
{
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) 
    {
        if(inorder.size()!=postorder.size())
        {
            return NULL;
        }
        map<int,int> hm;
        for(int i=0;i<inorder.size();i++)
        {
            hm[inorder[i]]=i;
        }
        return build(inorder , 0 , inorder.size()-1, postorder , 0 , postorder.size() -  1 , hm);
    }

    TreeNode* build(vector<int>&inorder , int is , int ie , vector<int> &postorder , int ps , int pe , map<int,int>&hm)
    {
        if(ps>pe || is>ie)
        {
            return NULL;
        }
        TreeNode* root=new TreeNode(postorder[pe]);

        int inroot=hm[postorder[pe]];
        int numleft=inroot-is;

        root->left=build(inorder, is , inroot-1 ,postorder, ps ,ps+numleft-1 ,hm);
        root->right=build(inorder,inroot+1 ,ie ,postorder, ps+numleft, pe-1 ,hm);

        return root;
    }
};
