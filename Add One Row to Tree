class Solution 
{
public:
    TreeNode* addOneRow(TreeNode* root, int val, int depth) 
    {
          if (depth == 1) {
        TreeNode* newRoot = new TreeNode(val);
        newRoot->left = root;
        return newRoot;
    }

    queue<TreeNode*> q;
    q.push(root);
    int currDepth = 1;

    while (!q.empty()) {
        int size = q.size();
        if (currDepth == depth - 1) {
            for (int i = 0; i < size; ++i) {
                TreeNode* cur = q.front();
                q.pop();
                TreeNode* newLeft = new TreeNode(val);
                TreeNode* newRight = new TreeNode(val);
                newLeft->left = cur->left;
                newRight->right = cur->right;
                cur->left = newLeft;
                cur->right = newRight;
            }
            break;
        }
        for (int i = 0; i < size; ++i) {
            TreeNode* cur = q.front();
            q.pop();
            if (cur->left) q.push(cur->left);
            if (cur->right) q.push(cur->right);
        }
        ++currDepth;
    }

    return root;  
    }
};
