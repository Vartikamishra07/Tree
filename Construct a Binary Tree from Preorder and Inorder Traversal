class Solution 
{
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
       map<int,int>inMap;
       for(int i=0;i<inorder.size();i++)
       {
           inMap[inorder[i]]=i;
       } 
       TreeNode* root=build(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,inMap);
       return root;
    }

    TreeNode* build(vector<int>&preorder , int preStart , int preEnd , vector<int> &inorder , int inStart , int inEnd, map<int,int>&inMap)
    {
         if(preStart>preEnd || inStart>inEnd)
         {
             return NULL;
         }
         TreeNode* root=new TreeNode(preorder[preStart]);
         int inroot=inMap[root->val];
         int numsLeft=inroot-inStart;
         root->left=build(preorder , preStart+1, preStart+numsLeft , inorder , inStart , inroot-1, inMap);
         root->right=build(preorder , preStart+numsLeft+1 , preEnd , inorder , inroot+1 , inEnd, inMap);
         return root;
    }
};
