1.Preorder traversal

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution 
{
public:
    void preorder(TreeNode* root , vector<int> &res)
    {
         if(root==NULL)
        {
            return;
        }
        res.push_back(root->val);
        preorder(root->left,res);
        preorder(root->right,res);
    }
    vector<int> preorderTraversal(TreeNode* root) 
    {
        vector <int> res;
        preorder(root , res);
        return res;
    }
};



2.Inorder Traversal

class Solution 
{
public:
    void inorder(TreeNode *root , vector<int> &res)
    {
      if(root==NULL)
      {
          return;
      }
      inorder(root->left , res);
      res.push_back(root->val);
      inorder(root->right , res);
    }

    vector<int> inorderTraversal(TreeNode* root) 
    {
        vector<int> res;
        inorder(root , res);
        return res;

    }
};

3. Postorder traversal

class Solution {
public:
   void postorder(TreeNode *root , vector<int> &res)
    {
      if(root==NULL)
      {
          return;
      }
      postorder(root->left , res);
      postorder(root->right , res);
      res.push_back(root->val);
    }

    vector<int> postorderTraversal(TreeNode* root) 
    {
        vector<int> res;
        postorder(root , res);
        return res;
    }
};
